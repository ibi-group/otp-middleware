---
swagger: "2.0"
info:
  description: "OpenTripPlanner Middleware API"
  title: "OTP Middleware"
  termsOfService: ""
  contact:
    name: "Arcadis"
    url: "https://github.com/ibi-group"
    email: "otpdtsupport@arcadis.com"
  license:
    name: "MIT License"
    url: "https://opensource.org/licenses/MIT"
host: "localhost:4567"
basePath: "/"
tags:
- name: "api/admin/user"
  description: "Interface for querying and managing 'AdminUser' entities."
- name: "api/secure/application"
  description: "Interface for querying and managing 'ApiUser' entities."
- name: "api/secure/cdp"
  description: "Interface for querying and managing 'CDPUser' entities."
- name: "api/secure/monitoredtrip"
  description: "Interface for querying and managing 'MonitoredTrip' entities."
- name: "api/secure/triprequests"
  description: "Interface for retrieving trip requests."
- name: "api/secure/monitoredcomponent"
  description: "Interface for querying and managing 'MonitoredComponent' entities."
- name: "api/secure/user"
  description: "Interface for querying and managing 'OtpUser' entities."
- name: "api/secure/logs"
  description: "Interface for retrieving API logs from AWS."
- name: "api/admin/bugsnag/eventsummary"
  description: "Interface for reporting and retrieving application errors using Bugsnag."
- name: "api/secure/connected-data"
  description: "Interface for listing and downloading CDP files from S3."
- name: "otp"
  description: "Proxy interface for OTP 2 endpoints. Refer to <a href='http://otp-docs.ibi-transit.com/api/index.html'>OTP's\
    \ API documentation</a> for OTP's supported API resources."
- name: "otp2"
  description: "Proxy interface for OTP 2 endpoints. Refer to <a href='http://otp-docs.ibi-transit.com/api/index.html'>OTP's\
    \ API documentation</a> for OTP's supported API resources."
schemes:
- "https"
paths:
  /api/admin/user/fromtoken:
    get:
      tags:
      - "api/admin/user"
      description: "Retrieves an AdminUser entity using an Auth0 access token passed\
        \ in an Authorization header."
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/AdminUser"
          schema:
            $ref: "#/definitions/AdminUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
    delete:
      tags:
      - "api/admin/user"
      description: "Deletes an AdminUser entity using an Auth0 access token passed\
        \ in an Authorization header."
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/AdminUser"
          schema:
            $ref: "#/definitions/AdminUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/admin/user/verification-email:
    get:
      tags:
      - "api/admin/user"
      description: "Triggers a job to resend the Auth0 verification email."
      parameters: []
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/Job"
          schema:
            $ref: "#/definitions/Job"
  /api/admin/user:
    get:
      tags:
      - "api/admin/user"
      description: "Gets a paginated list of all 'AdminUser' entities."
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "If specified, the maximum number of items to return."
        required: false
        type: "string"
        default: "10"
      - name: "offset"
        in: "query"
        description: "If specified, the number of records to skip/offset."
        required: false
        type: "string"
        default: "0"
      - name: "userId"
        in: "query"
        description: "If specified, the required user id."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/ResponseList"
          schema:
            $ref: "#/definitions/ResponseList"
    post:
      tags:
      - "api/admin/user"
      description: "Creates a 'AdminUser' entity."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/AdminUser"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/AdminUser"
          schema:
            $ref: "#/definitions/AdminUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/admin/user/{id}:
    get:
      tags:
      - "api/admin/user"
      description: "Returns the 'AdminUser' entity with the specified id, or 404 if\
        \ not found."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to search."
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/AdminUser"
          schema:
            $ref: "#/definitions/AdminUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
    put:
      tags:
      - "api/admin/user"
      description: "Updates and returns the 'AdminUser' entity with the specified\
        \ id, or 404 if not found."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to update."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/AdminUser"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/AdminUser"
          schema:
            $ref: "#/definitions/AdminUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
    delete:
      tags:
      - "api/admin/user"
      description: "Deletes the 'AdminUser' entity with the specified id if it exists."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to delete."
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/AdminUser"
          schema:
            $ref: "#/definitions/AdminUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/application/{id}/apikey:
    post:
      tags:
      - "api/secure/application"
      description: "Creates API key for ApiUser (with optional AWS API Gateway usage\
        \ plan ID)."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The user ID"
        required: true
        type: "string"
      - name: "usagePlanId"
        in: "query"
        description: "Optional AWS API Gateway usage plan ID."
        required: false
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/ApiUser"
          schema:
            $ref: "#/definitions/ApiUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/application/{id}/apikey/{apiKeyId}:
    delete:
      tags:
      - "api/secure/application"
      description: "Deletes API key for ApiUser."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The user ID."
        required: true
        type: "string"
      - name: "apiKeyId"
        in: "path"
        description: "The ID of the API key."
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/ApiUser"
          schema:
            $ref: "#/definitions/ApiUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/application/authenticate:
    post:
      tags:
      - "api/secure/application"
      description: "Authenticates ApiUser with Auth0."
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "Auth0 username (usually email address)."
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "Auth0 password."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/TokenHolder"
          schema:
            $ref: "#/definitions/TokenHolder"
  /api/secure/application/fromtoken:
    get:
      tags:
      - "api/secure/application"
      description: "Retrieves an ApiUser entity using an Auth0 access token passed\
        \ in an Authorization header."
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/ApiUser"
          schema:
            $ref: "#/definitions/ApiUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
    delete:
      tags:
      - "api/secure/application"
      description: "Deletes an ApiUser entity using an Auth0 access token passed in\
        \ an Authorization header."
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/ApiUser"
          schema:
            $ref: "#/definitions/ApiUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/application/verification-email:
    get:
      tags:
      - "api/secure/application"
      description: "Triggers a job to resend the Auth0 verification email."
      parameters: []
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/Job"
          schema:
            $ref: "#/definitions/Job"
  /api/secure/application:
    get:
      tags:
      - "api/secure/application"
      description: "Gets a paginated list of all 'ApiUser' entities."
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "If specified, the maximum number of items to return."
        required: false
        type: "string"
        default: "10"
      - name: "offset"
        in: "query"
        description: "If specified, the number of records to skip/offset."
        required: false
        type: "string"
        default: "0"
      - name: "userId"
        in: "query"
        description: "If specified, the required user id."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/ResponseList"
          schema:
            $ref: "#/definitions/ResponseList"
    post:
      tags:
      - "api/secure/application"
      description: "Creates a 'ApiUser' entity."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/ApiUser"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/ApiUser"
          schema:
            $ref: "#/definitions/ApiUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/application/{id}:
    get:
      tags:
      - "api/secure/application"
      description: "Returns the 'ApiUser' entity with the specified id, or 404 if\
        \ not found."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to search."
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/ApiUser"
          schema:
            $ref: "#/definitions/ApiUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
    put:
      tags:
      - "api/secure/application"
      description: "Updates and returns the 'ApiUser' entity with the specified id,\
        \ or 404 if not found."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to update."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/ApiUser"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/ApiUser"
          schema:
            $ref: "#/definitions/ApiUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
    delete:
      tags:
      - "api/secure/application"
      description: "Deletes the 'ApiUser' entity with the specified id if it exists."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to delete."
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/ApiUser"
          schema:
            $ref: "#/definitions/ApiUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/cdp/fromtoken:
    get:
      tags:
      - "api/secure/cdp"
      description: "Retrieves an CDPUser entity using an Auth0 access token passed\
        \ in an Authorization header."
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/CDPUser"
          schema:
            $ref: "#/definitions/CDPUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
    delete:
      tags:
      - "api/secure/cdp"
      description: "Deletes an CDPUser entity using an Auth0 access token passed in\
        \ an Authorization header."
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/CDPUser"
          schema:
            $ref: "#/definitions/CDPUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/cdp/verification-email:
    get:
      tags:
      - "api/secure/cdp"
      description: "Triggers a job to resend the Auth0 verification email."
      parameters: []
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/Job"
          schema:
            $ref: "#/definitions/Job"
  /api/secure/cdp:
    get:
      tags:
      - "api/secure/cdp"
      description: "Gets a paginated list of all 'CDPUser' entities."
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "If specified, the maximum number of items to return."
        required: false
        type: "string"
        default: "10"
      - name: "offset"
        in: "query"
        description: "If specified, the number of records to skip/offset."
        required: false
        type: "string"
        default: "0"
      - name: "userId"
        in: "query"
        description: "If specified, the required user id."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/ResponseList"
          schema:
            $ref: "#/definitions/ResponseList"
    post:
      tags:
      - "api/secure/cdp"
      description: "Creates a 'CDPUser' entity."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/CDPUser"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/CDPUser"
          schema:
            $ref: "#/definitions/CDPUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/cdp/{id}:
    get:
      tags:
      - "api/secure/cdp"
      description: "Returns the 'CDPUser' entity with the specified id, or 404 if\
        \ not found."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to search."
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/CDPUser"
          schema:
            $ref: "#/definitions/CDPUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
    put:
      tags:
      - "api/secure/cdp"
      description: "Updates and returns the 'CDPUser' entity with the specified id,\
        \ or 404 if not found."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to update."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/CDPUser"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/CDPUser"
          schema:
            $ref: "#/definitions/CDPUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
    delete:
      tags:
      - "api/secure/cdp"
      description: "Deletes the 'CDPUser' entity with the specified id if it exists."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to delete."
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/CDPUser"
          schema:
            $ref: "#/definitions/CDPUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/monitoredtrip/acceptdependent:
    get:
      tags:
      - "api/secure/monitoredtrip"
      description: "Accept a dependent request."
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/OtpUser"
          schema:
            $ref: "#/definitions/OtpUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/monitoredtrip/checkitinerary:
    post:
      tags:
      - "api/secure/monitoredtrip"
      description: "Returns the itinerary existence check results for a monitored\
        \ trip."
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/MonitoredTrip"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/ItineraryExistence"
          schema:
            $ref: "#/definitions/ItineraryExistence"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/monitoredtrip:
    get:
      tags:
      - "api/secure/monitoredtrip"
      description: "Gets a paginated list of all 'MonitoredTrip' entities."
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "If specified, the maximum number of items to return."
        required: false
        type: "string"
        default: "10"
      - name: "offset"
        in: "query"
        description: "If specified, the number of records to skip/offset."
        required: false
        type: "string"
        default: "0"
      - name: "userId"
        in: "query"
        description: "If specified, the required user id."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/ResponseList"
          schema:
            $ref: "#/definitions/ResponseList"
    post:
      tags:
      - "api/secure/monitoredtrip"
      description: "Creates a 'MonitoredTrip' entity."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/MonitoredTrip"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/MonitoredTrip"
          schema:
            $ref: "#/definitions/MonitoredTrip"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/monitoredtrip/{id}:
    get:
      tags:
      - "api/secure/monitoredtrip"
      description: "Returns the 'MonitoredTrip' entity with the specified id, or 404\
        \ if not found."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to search."
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/MonitoredTrip"
          schema:
            $ref: "#/definitions/MonitoredTrip"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
    put:
      tags:
      - "api/secure/monitoredtrip"
      description: "Updates and returns the 'MonitoredTrip' entity with the specified\
        \ id, or 404 if not found."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to update."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/MonitoredTrip"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/MonitoredTrip"
          schema:
            $ref: "#/definitions/MonitoredTrip"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
    delete:
      tags:
      - "api/secure/monitoredtrip"
      description: "Deletes the 'MonitoredTrip' entity with the specified id if it\
        \ exists."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to delete."
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/MonitoredTrip"
          schema:
            $ref: "#/definitions/MonitoredTrip"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/monitoredtrip/starttracking:
    post:
      tags:
      - "api/secure/monitoredtrip"
      description: "Initiates the tracking of a monitored trip."
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/StartTrackingPayload"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/TrackingResponse"
          schema:
            $ref: "#/definitions/TrackingResponse"
  /api/secure/monitoredtrip/updatetracking:
    post:
      tags:
      - "api/secure/monitoredtrip"
      description: "Provides tracking updates on a monitored trip."
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/UpdatedTrackingPayload"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/TrackingResponse"
          schema:
            $ref: "#/definitions/TrackingResponse"
  /api/secure/monitoredtrip/track:
    post:
      tags:
      - "api/secure/monitoredtrip"
      description: "Starts or updates tracking on a monitored trip."
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/TrackPayload"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/TrackingResponse"
          schema:
            $ref: "#/definitions/TrackingResponse"
  /api/secure/monitoredtrip/endtracking:
    post:
      tags:
      - "api/secure/monitoredtrip"
      description: "Terminates the tracking of a monitored trip by the user."
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/EndTrackingPayload"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/EndTrackingResponse"
          schema:
            $ref: "#/definitions/EndTrackingResponse"
  /api/secure/monitoredtrip/forciblyendtracking:
    post:
      tags:
      - "api/secure/monitoredtrip"
      description: "Forcibly terminates tracking of a monitored trip by trip ID."
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/ForceEndTrackingPayload"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/EndTrackingResponse"
          schema:
            $ref: "#/definitions/EndTrackingResponse"
  /api/secure/triprequests:
    get:
      tags:
      - "api/secure/triprequests"
      description: "Gets a paginated list of the most recent trip requests for a user."
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "query"
        description: "The OTP user for which to retrieve trip requests."
        required: true
        type: "string"
      - name: "limit"
        in: "query"
        description: "If specified, the maximum number of items to return."
        required: false
        type: "string"
        default: "10"
      - name: "offset"
        in: "query"
        description: "If specified, the number of records to skip/offset."
        required: false
        type: "string"
        default: "0"
      - name: "fromDate"
        in: "query"
        description: "If specified, the earliest date (format yyyy-MM-dd) for which\
          \ trip requests are retrieved."
        required: false
        type: "string"
        default: "The current date"
        pattern: "yyyy-MM-dd"
      - name: "toDate"
        in: "query"
        description: "If specified, the latest date (format yyyy-MM-dd) for which\
          \ trip requests are retrieved."
        required: false
        type: "string"
        default: "The current date"
        pattern: "yyyy-MM-dd"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/TripRequest"
          schema:
            $ref: "#/definitions/TripRequest"
  /api/secure/monitoredcomponent:
    get:
      tags:
      - "api/secure/monitoredcomponent"
      description: "Gets a paginated list of all 'MonitoredComponent' entities."
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "If specified, the maximum number of items to return."
        required: false
        type: "string"
        default: "10"
      - name: "offset"
        in: "query"
        description: "If specified, the number of records to skip/offset."
        required: false
        type: "string"
        default: "0"
      - name: "userId"
        in: "query"
        description: "If specified, the required user id."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/ResponseList"
          schema:
            $ref: "#/definitions/ResponseList"
    post:
      tags:
      - "api/secure/monitoredcomponent"
      description: "Creates a 'MonitoredComponent' entity."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/MonitoredComponent"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/MonitoredComponent"
          schema:
            $ref: "#/definitions/MonitoredComponent"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/monitoredcomponent/{id}:
    get:
      tags:
      - "api/secure/monitoredcomponent"
      description: "Returns the 'MonitoredComponent' entity with the specified id,\
        \ or 404 if not found."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to search."
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/MonitoredComponent"
          schema:
            $ref: "#/definitions/MonitoredComponent"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
    put:
      tags:
      - "api/secure/monitoredcomponent"
      description: "Updates and returns the 'MonitoredComponent' entity with the specified\
        \ id, or 404 if not found."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to update."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/MonitoredComponent"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/MonitoredComponent"
          schema:
            $ref: "#/definitions/MonitoredComponent"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
    delete:
      tags:
      - "api/secure/monitoredcomponent"
      description: "Deletes the 'MonitoredComponent' entity with the specified id\
        \ if it exists."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to delete."
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/MonitoredComponent"
          schema:
            $ref: "#/definitions/MonitoredComponent"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/user/{id}/verify_sms/{phoneNumber}:
    get:
      tags:
      - "api/secure/user"
      description: "Request an SMS verification to be sent to an OtpUser's phone number."
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the OtpUser."
        required: true
        type: "string"
      - name: "phoneNumber"
        in: "path"
        description: "The phone number to validate, in E.164 format (e.g. +15555550123)."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/VerificationResult"
          schema:
            $ref: "#/definitions/VerificationResult"
  /api/secure/user/{id}/verify_sms/{code}:
    post:
      tags:
      - "api/secure/user"
      description: "Verify an OtpUser's phone number with a verification code."
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the OtpUser."
        required: true
        type: "string"
      - name: "code"
        in: "path"
        description: "The SMS verification code."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/VerificationResult"
          schema:
            $ref: "#/definitions/VerificationResult"
  /api/secure/user/fromtoken:
    get:
      tags:
      - "api/secure/user"
      description: "Retrieves an OtpUser entity using an Auth0 access token passed\
        \ in an Authorization header."
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/OtpUser"
          schema:
            $ref: "#/definitions/OtpUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
    delete:
      tags:
      - "api/secure/user"
      description: "Deletes an OtpUser entity using an Auth0 access token passed in\
        \ an Authorization header."
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/OtpUser"
          schema:
            $ref: "#/definitions/OtpUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/user/verification-email:
    get:
      tags:
      - "api/secure/user"
      description: "Triggers a job to resend the Auth0 verification email."
      parameters: []
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/Job"
          schema:
            $ref: "#/definitions/Job"
  /api/secure/user:
    get:
      tags:
      - "api/secure/user"
      description: "Gets a paginated list of all 'OtpUser' entities."
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "If specified, the maximum number of items to return."
        required: false
        type: "string"
        default: "10"
      - name: "offset"
        in: "query"
        description: "If specified, the number of records to skip/offset."
        required: false
        type: "string"
        default: "0"
      - name: "userId"
        in: "query"
        description: "If specified, the required user id."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            $ref: "#/definitions/ResponseList"
          schema:
            $ref: "#/definitions/ResponseList"
    post:
      tags:
      - "api/secure/user"
      description: "Creates a 'OtpUser' entity."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/OtpUser"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/OtpUser"
          schema:
            $ref: "#/definitions/OtpUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/user/{id}:
    get:
      tags:
      - "api/secure/user"
      description: "Returns the 'OtpUser' entity with the specified id, or 404 if\
        \ not found."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to search."
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/OtpUser"
          schema:
            $ref: "#/definitions/OtpUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
    put:
      tags:
      - "api/secure/user"
      description: "Updates and returns the 'OtpUser' entity with the specified id,\
        \ or 404 if not found."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to update."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Body object description"
        required: true
        schema:
          $ref: "#/definitions/OtpUser"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/OtpUser"
          schema:
            $ref: "#/definitions/OtpUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
    delete:
      tags:
      - "api/secure/user"
      description: "Deletes the 'OtpUser' entity with the specified id if it exists."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entity to delete."
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          examples: {}
          responseSchema:
            $ref: "#/definitions/OtpUser"
          schema:
            $ref: "#/definitions/OtpUser"
        "400":
          description: "The request was not formed properly (e.g., some required parameters\
            \ may be missing). See the details of the returned response to determine\
            \ the exact issue."
          examples: {}
        "401":
          description: "The server was not able to authenticate the request. This\
            \ can happen if authentication headers are missing or malformed, or the\
            \ authentication server cannot be reached."
          examples: {}
        "403":
          description: "The requesting user is not allowed to perform the request."
          examples: {}
        "404":
          description: "The requested item was not found."
          examples: {}
        "500":
          description: "An error occurred while performing the request. Contact an\
            \ API administrator for more information."
          examples: {}
  /api/secure/logs:
    get:
      tags:
      - "api/secure/logs"
      description: "Gets a list of all API usage logs."
      produces:
      - "application/json"
      parameters:
      - name: "keyId"
        in: "query"
        description: "If specified, restricts the search to the specified AWS API\
          \ key ID."
        required: false
        type: "string"
      - name: "startDate"
        in: "query"
        description: "If specified, the earliest date (format yyyy-MM-dd) for which\
          \ usage logs are retrieved."
        required: false
        type: "string"
        default: "30 days prior to the current date"
        pattern: "yyyy-MM-dd"
      - name: "endDate"
        in: "query"
        description: "If specified, the latest date (format yyyy-MM-dd) for which\
          \ usage logs are retrieved."
        required: false
        type: "string"
        default: "The current date"
        pattern: "yyyy-MM-dd"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            type: "array"
            items:
              $ref: "#/definitions/ApiUsageResult"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ApiUsageResult"
  /api/admin/bugsnag/eventsummary:
    get:
      tags:
      - "api/admin/bugsnag/eventsummary"
      description: "Gets a paginated list of the latest Bugsnag event summaries."
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "If specified, the maximum number of items to return."
        required: false
        type: "string"
        default: "10"
      - name: "offset"
        in: "query"
        description: "If specified, the number of records to skip/offset."
        required: false
        type: "string"
        default: "0"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            type: "array"
            items:
              $ref: "#/definitions/BugsnagEvent"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BugsnagEvent"
  /api/secure/connected-data:
    get:
      tags:
      - "api/secure/connected-data"
      description: "Gets a paginated list of CDP zip files in the configured S3 bucket."
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "If specified, the maximum number of items to return."
        required: false
        type: "string"
        default: "10"
      - name: "offset"
        in: "query"
        description: "If specified, the number of records to skip/offset."
        required: false
        type: "string"
        default: "0"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            type: "array"
            items:
              $ref: "#/definitions/CDPFile"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CDPFile"
  /api/secure/connected-data/download:
    get:
      tags:
      - "api/secure/connected-data"
      description: "Generates a download link for a specified object within the CDP\
        \ bucket."
      produces:
      - "application/json"
      parameters:
      - name: "/download"
        in: "query"
        description: "The key of the object to generate a link for."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          responseSchema:
            type: "array"
            items:
              $ref: "#/definitions/URL"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/URL"
  /otp/*:
    get:
      tags:
      - "otp"
      description: "Forwards any GET request to OTP 2. Refer to <a href='http://otp-docs.ibi-transit.com/api/index.html'>OTP's\
        \ API documentation</a> for OTP's supported API resources."
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "userId"
        in: "query"
        description: "If a third-party application is making a trip plan request on\
          \ behalf of an end user (OtpUser), the user id must be specified."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
    post:
      tags:
      - "otp"
      description: "Forwards any POST request to OTP 2. Refer to <a href='http://otp-docs.ibi-transit.com/api/index.html'>OTP's\
        \ API documentation</a> for OTP's supported API resources."
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "query"
        description: "If a third-party application is making a trip plan request on\
          \ behalf of an end user (OtpUser), the user id must be specified."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
  /otp2/*:
    get:
      tags:
      - "otp2"
      description: "Forwards any GET request to OTP 2. Refer to <a href='http://otp-docs.ibi-transit.com/api/index.html'>OTP's\
        \ API documentation</a> for OTP's supported API resources."
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "userId"
        in: "query"
        description: "If a third-party application is making a trip plan request on\
          \ behalf of an end user (OtpUser), the user id must be specified."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
    post:
      tags:
      - "otp2"
      description: "Forwards any POST request to OTP 2. Refer to <a href='http://otp-docs.ibi-transit.com/api/index.html'>OTP's\
        \ API documentation</a> for OTP's supported API resources."
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "query"
        description: "If a third-party application is making a trip plan request on\
          \ behalf of an end user (OtpUser), the user id must be specified."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
definitions:
  Job:
    type: "object"
    properties:
      status:
        type: "string"
      type:
        type: "string"
      createdAt:
        type: "string"
        format: "date"
      id:
        type: "string"
  ResponseList:
    type: "object"
    properties:
      clazz:
        type: "string"
      data:
        type: "array"
        items:
          $ref: "#/definitions/Object"
      offset:
        type: "integer"
        format: "int32"
      limit:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int64"
      timestamp:
        type: "string"
        format: "date"
  AdminUser:
    type: "object"
    properties:
      subscriptions:
        type: "array"
        items:
          type: "string"
          enum:
          - "NEW_ERROR"
  TokenHolder:
    type: "object"
    properties:
      accessToken:
        type: "string"
      idToken:
        type: "string"
      refreshToken:
        type: "string"
      tokenType:
        type: "string"
      expiresIn:
        type: "integer"
        format: "int64"
  ApiKey:
    type: "object"
    properties:
      keyId:
        type: "string"
      name:
        type: "string"
      value:
        type: "string"
  ApiUser:
    type: "object"
    properties:
      apiKeys:
        type: "array"
        items:
          $ref: "#/definitions/ApiKey"
      appName:
        type: "string"
      appPurpose:
        type: "string"
      appUrl:
        type: "string"
      company:
        type: "string"
      hasConsentedToTerms:
        type: "boolean"
      name:
        type: "string"
  CDPUser:
    type: "object"
    properties:
      name:
        type: "string"
      S3DownloadTimes:
        $ref: "#/definitions/Map"
  TripStop:
    type: "object"
    properties:
      id:
        type: "string"
      gtfsId:
        type: "string"
  Stop:
    type: "object"
    properties:
      alerts:
        type: "array"
        items:
          $ref: "#/definitions/LocalizedAlert"
      code:
        type: "string"
      gtfsId:
        type: "string"
      id:
        type: "string"
      lon:
        type: "number"
        format: "double"
      lat:
        type: "number"
        format: "double"
  TripMonitorNotification:
    type: "object"
    properties:
      type:
        type: "string"
        enum:
        - "DEPARTURE_DELAY"
        - "ARRIVAL_DELAY"
        - "ITINERARY_CHANGED"
        - "ALERT_FOUND"
        - "ITINERARY_NOT_FOUND"
        - "INITIAL_REMINDER"
      body:
        type: "string"
  EncodedPolyline:
    type: "object"
    properties:
      points:
        type: "string"
      levels:
        type: "string"
      length:
        type: "integer"
        format: "int32"
  OtpGraphQLTransportMode:
    type: "object"
    properties:
      mode:
        type: "string"
      qualifier:
        type: "string"
  Step:
    type: "object"
    properties:
      distance:
        type: "number"
        format: "double"
      relativeDirection:
        type: "string"
      streetName:
        type: "string"
      absoluteDirection:
        type: "string"
      stayOn:
        type: "boolean"
      area:
        type: "boolean"
      bogusName:
        type: "boolean"
      lon:
        type: "number"
        format: "double"
      lat:
        type: "number"
        format: "double"
  ItineraryExistenceResult:
    type: "object"
    properties:
      invalidDates:
        type: "array"
        items:
          type: "string"
      validDates:
        type: "array"
        items:
          type: "string"
      itineraries:
        type: "array"
        items:
          $ref: "#/definitions/Itinerary"
  Currency:
    type: "object"
    properties:
      symbol:
        type: "string"
      currency:
        type: "string"
      defaultFractionDigits:
        type: "integer"
        format: "int32"
      currencyCode:
        type: "string"
  Itinerary:
    type: "object"
    properties:
      duration:
        type: "integer"
        format: "int64"
      startTime:
        type: "string"
        format: "date"
      endTime:
        type: "string"
        format: "date"
      walkTime:
        type: "integer"
        format: "int64"
      transitTime:
        type: "integer"
        format: "int64"
      waitingTime:
        type: "integer"
        format: "int64"
      walkDistance:
        type: "number"
        format: "double"
      walkLimitExceeded:
        type: "boolean"
      elevationLost:
        type: "number"
        format: "double"
      elevationGained:
        type: "number"
        format: "double"
      transfers:
        type: "integer"
        format: "int32"
      fare:
        $ref: "#/definitions/FareWrapper"
      legs:
        type: "array"
        items:
          $ref: "#/definitions/Leg"
  OtpGraphQLVariables:
    type: "object"
    properties:
      arriveBy:
        type: "boolean"
      banned:
        $ref: "#/definitions/OtpGraphQLRoutesAndTrips"
      bikeReluctance:
        type: "number"
        format: "float"
      carReluctance:
        type: "number"
        format: "float"
      date:
        type: "string"
      fromPlace:
        type: "string"
      mobilityProfile:
        type: "string"
      modes:
        type: "array"
        items:
          $ref: "#/definitions/OtpGraphQLTransportMode"
      numItineraries:
        type: "integer"
        format: "int32"
      preferred:
        $ref: "#/definitions/OtpGraphQLRoutesAndTrips"
      time:
        type: "string"
      toPlace:
        type: "string"
      unpreferred:
        $ref: "#/definitions/OtpGraphQLRoutesAndTrips"
      walkReluctance:
        type: "number"
        format: "float"
      walkSpeed:
        type: "number"
        format: "float"
      wheelchair:
        type: "boolean"
  FareWrapper:
    type: "object"
    properties:
      fare:
        $ref: "#/definitions/Fare"
      details:
        $ref: "#/definitions/FareDetails"
  LocalizedAlert:
    type: "object"
    properties:
      alertHeaderText:
        type: "string"
      alertDescriptionText:
        type: "string"
      alertUrl:
        type: "string"
      effectiveStartDate:
        type: "string"
        format: "date"
      effectiveEndDate:
        type: "string"
        format: "date"
      id:
        type: "string"
  Route:
    type: "object"
    properties:
      alerts:
        type: "array"
        items:
          $ref: "#/definitions/LocalizedAlert"
      color:
        type: "string"
      gtfsId:
        type: "string"
      id:
        type: "string"
      longName:
        type: "string"
      shortName:
        type: "string"
      textColor:
        type: "string"
      type:
        type: "integer"
        format: "int32"
  MonitoredTrip:
    type: "object"
    properties:
      userId:
        type: "string"
      tripName:
        type: "string"
      tripTime:
        type: "string"
      from:
        $ref: "#/definitions/Place"
      to:
        $ref: "#/definitions/Place"
      arriveBy:
        type: "boolean"
      leadTimeInMinutes:
        type: "integer"
        format: "int32"
      monday:
        type: "boolean"
      tuesday:
        type: "boolean"
      wednesday:
        type: "boolean"
      thursday:
        type: "boolean"
      friday:
        type: "boolean"
      saturday:
        type: "boolean"
      sunday:
        type: "boolean"
      excludeFederalHolidays:
        type: "boolean"
      isActive:
        type: "boolean"
      snoozed:
        type: "boolean"
      queryParams:
        type: "string"
      otp2QueryParams:
        $ref: "#/definitions/OtpGraphQLVariables"
      itinerary:
        $ref: "#/definitions/Itinerary"
      notifyOnAlert:
        type: "boolean"
      departureVarianceMinutesThreshold:
        type: "integer"
        format: "int32"
      arrivalVarianceMinutesThreshold:
        type: "integer"
        format: "int32"
      notifyOnItineraryChange:
        type: "boolean"
      itineraryExistence:
        $ref: "#/definitions/ItineraryExistence"
      journeyState:
        $ref: "#/definitions/JourneyState"
      notifyAtLeadingInterval:
        type: "boolean"
      primary:
        $ref: "#/definitions/GuardianUser"
      companion:
        $ref: "#/definitions/GuardianUser"
      observers:
        type: "array"
        items:
          $ref: "#/definitions/GuardianUser"
  StopTime:
    type: "object"
    properties:
      stop:
        $ref: "#/definitions/TripStop"
      stopPosition:
        type: "integer"
        format: "int32"
  Trip:
    type: "object"
    properties:
      gtfsId:
        type: "string"
      id:
        type: "string"
      departureStoptime:
        $ref: "#/definitions/StopTime"
      arrivalStoptime:
        $ref: "#/definitions/StopTime"
  Agency:
    type: "object"
    properties:
      alerts:
        type: "array"
        items:
          $ref: "#/definitions/LocalizedAlert"
      gtfsId:
        type: "string"
      id:
        type: "string"
      name:
        type: "string"
  GuardianUser:
    type: "object"
    properties:
      userId:
        type: "string"
      email:
        type: "string"
      status:
        type: "string"
        enum:
        - "PENDING"
        - "CONFIRMED"
        - "INVALID"
  OtpGraphQLRoutesAndTrips:
    type: "object"
    properties:
      routes:
        type: "string"
      trips:
        type: "string"
  FareDetails:
    type: "object"
    properties:
      regular:
        type: "array"
        items:
          $ref: "#/definitions/FareComponent"
      student:
        type: "array"
        items:
          $ref: "#/definitions/FareComponent"
      senior:
        type: "array"
        items:
          $ref: "#/definitions/FareComponent"
      tram:
        type: "array"
        items:
          $ref: "#/definitions/FareComponent"
      special:
        type: "array"
        items:
          $ref: "#/definitions/FareComponent"
      youth:
        type: "array"
        items:
          $ref: "#/definitions/FareComponent"
  Fare:
    type: "object"
    properties:
      regular:
        $ref: "#/definitions/Price"
      student:
        $ref: "#/definitions/Price"
      senior:
        $ref: "#/definitions/Price"
      tram:
        $ref: "#/definitions/Price"
      special:
        $ref: "#/definitions/Price"
      youth:
        $ref: "#/definitions/Price"
  Leg:
    type: "object"
    properties:
      startTime:
        type: "string"
        format: "date"
      endTime:
        type: "string"
        format: "date"
      departureDelay:
        type: "integer"
        format: "int32"
      arrivalDelay:
        type: "integer"
        format: "int32"
      realTime:
        type: "boolean"
      distance:
        type: "number"
        format: "double"
      pathway:
        type: "boolean"
      mode:
        type: "string"
      interlineWithPreviousLeg:
        type: "boolean"
      from:
        $ref: "#/definitions/Place"
      to:
        $ref: "#/definitions/Place"
      legGeometry:
        $ref: "#/definitions/EncodedPolyline"
      rentedBike:
        type: "boolean"
      rentedCar:
        type: "boolean"
      rentedVehicle:
        type: "boolean"
      hailedCar:
        type: "boolean"
      transitLeg:
        type: "boolean"
      duration:
        type: "number"
        format: "double"
      intermediateStops:
        type: "array"
        items:
          $ref: "#/definitions/Place"
      steps:
        type: "array"
        items:
          $ref: "#/definitions/Step"
      agencyName:
        type: "string"
      agencyUrl:
        type: "string"
      routeType:
        type: "integer"
        format: "int32"
      routeId:
        type: "string"
      agencyId:
        type: "string"
      tripBlockId:
        type: "string"
      tripId:
        type: "string"
      serviceDate:
        type: "string"
      interStopGeometry:
        type: "array"
        items:
          $ref: "#/definitions/EncodedPolyline"
      routeShortName:
        type: "string"
      routeLongName:
        type: "string"
      routeColor:
        type: "string"
      routeTextColor:
        type: "string"
      alerts:
        type: "array"
        items:
          $ref: "#/definitions/LocalizedAlert"
      headsign:
        type: "string"
      agency:
        $ref: "#/definitions/Agency"
      route:
        $ref: "#/definitions/Route"
      trip:
        $ref: "#/definitions/Trip"
  OtpRequest:
    type: "object"
    properties:
      dateTime:
        $ref: "#/definitions/ZonedDateTime"
      requestParameters:
        $ref: "#/definitions/OtpGraphQLVariables"
  Price:
    type: "object"
    properties:
      currency:
        $ref: "#/definitions/Currency"
      cents:
        type: "integer"
        format: "int32"
  ItineraryExistence:
    type: "object"
    properties:
      otpRequests:
        type: "array"
        items:
          $ref: "#/definitions/OtpRequest"
      referenceItinerary:
        $ref: "#/definitions/Itinerary"
      monday:
        $ref: "#/definitions/ItineraryExistenceResult"
      tuesday:
        $ref: "#/definitions/ItineraryExistenceResult"
      wednesday:
        $ref: "#/definitions/ItineraryExistenceResult"
      thursday:
        $ref: "#/definitions/ItineraryExistenceResult"
      friday:
        $ref: "#/definitions/ItineraryExistenceResult"
      saturday:
        $ref: "#/definitions/ItineraryExistenceResult"
      sunday:
        $ref: "#/definitions/ItineraryExistenceResult"
      message:
        type: "string"
      error:
        type: "boolean"
      tripIsArriveBy:
        type: "boolean"
      timestamp:
        type: "string"
        format: "date"
      otpResponseProvider:
        $ref: "#/definitions/Function"
  JourneyState:
    type: "object"
    properties:
      baselineArrivalTimeEpochMillis:
        type: "integer"
        format: "int64"
      baselineDepartureTimeEpochMillis:
        type: "integer"
        format: "int64"
      scheduledArrivalTimeEpochMillis:
        type: "integer"
        format: "int64"
      scheduledDepartureTimeEpochMillis:
        type: "integer"
        format: "int64"
      lastCheckedEpochMillis:
        type: "integer"
        format: "int64"
      lastNotifications:
        type: "array"
        items:
          $ref: "#/definitions/TripMonitorNotification"
      lastNotificationTimeMillis:
        type: "integer"
        format: "int64"
      matchingItinerary:
        $ref: "#/definitions/Itinerary"
      targetDate:
        type: "string"
      tripStatus:
        type: "string"
        enum:
        - "NO_LONGER_POSSIBLE"
        - "NEXT_TRIP_NOT_POSSIBLE"
        - "TRIP_UPCOMING"
        - "TRIP_ACTIVE"
        - "PAST_TRIP"
      hasRealtimeData:
        type: "boolean"
  FareComponent:
    type: "object"
    properties:
      fareId:
        type: "string"
      price:
        $ref: "#/definitions/Price"
      routes:
        type: "array"
        items:
          type: "string"
  Place:
    type: "object"
    properties:
      name:
        type: "string"
      lon:
        type: "number"
        format: "double"
      lat:
        type: "number"
        format: "double"
      departure:
        type: "string"
        format: "date"
      orig:
        type: "string"
      vertexType:
        type: "string"
      stopId:
        type: "string"
      arrival:
        type: "string"
        format: "date"
      stop:
        $ref: "#/definitions/Stop"
      stopIndex:
        type: "integer"
        format: "int32"
      stopSequence:
        type: "integer"
        format: "int32"
      stopCode:
        type: "string"
      platformCode:
        type: "string"
      zoneId:
        type: "string"
      bikeShareId:
        type: "string"
      networks:
        type: "array"
        items:
          type: "string"
      address:
        type: "string"
  StartTrackingPayload:
    type: "object"
    properties:
      location:
        $ref: "#/definitions/TrackingLocation"
      tripId:
        type: "string"
  TrackingLocation:
    type: "object"
    properties:
      bearing:
        type: "integer"
        format: "int32"
      lat:
        type: "number"
        format: "double"
      lon:
        type: "number"
        format: "double"
      speed:
        type: "integer"
        format: "int32"
      timestamp:
        type: "string"
        format: "date"
      tripStatus:
        type: "string"
        enum:
        - "ON_SCHEDULE"
        - "BEHIND_SCHEDULE"
        - "AHEAD_OF_SCHEDULE"
        - "ENDED"
        - "DEVIATED"
        - "COMPLETED"
      locationAccuracy:
        type: "number"
        format: "double"
      deviationMeters:
        type: "number"
        format: "double"
  TrackingResponse:
    type: "object"
    properties:
      frequencySeconds:
        type: "integer"
        format: "int32"
      instruction:
        type: "string"
      journeyId:
        type: "string"
      tripStatus:
        type: "string"
      message:
        type: "string"
  UpdatedTrackingPayload:
    type: "object"
    properties:
      journeyId:
        type: "string"
      locations:
        type: "array"
        items:
          $ref: "#/definitions/TrackingLocation"
  TrackPayload:
    type: "object"
    properties:
      locations:
        type: "array"
        items:
          $ref: "#/definitions/TrackingLocation"
      tripId:
        type: "string"
  EndTrackingPayload:
    type: "object"
    properties:
      journeyId:
        type: "string"
  EndTrackingResponse:
    type: "object"
    properties:
      instruction:
        type: "string"
      tripStatus:
        type: "string"
      message:
        type: "string"
  ForceEndTrackingPayload:
    type: "object"
    properties:
      tripId:
        type: "string"
  TripRequest:
    type: "object"
    properties:
      userId:
        type: "string"
      batchId:
        type: "string"
      fromPlace:
        type: "string"
      toPlace:
        type: "string"
      otp2QueryParams:
        $ref: "#/definitions/QueryVariables"
  QueryVariables:
    type: "object"
    properties:
      arriveBy:
        type: "boolean"
      banned:
        $ref: "#/definitions/RoutesAndTrips"
      bikeReluctance:
        type: "number"
        format: "float"
      carReluctance:
        type: "number"
        format: "float"
      date:
        type: "string"
      fromPlace:
        type: "string"
      mobilityProfile:
        type: "string"
      modes:
        type: "array"
        items:
          $ref: "#/definitions/TransportMode"
      numItineraries:
        type: "integer"
        format: "int32"
      preferred:
        $ref: "#/definitions/RoutesAndTrips"
      time:
        type: "string"
      toPlace:
        type: "string"
      unpreferred:
        $ref: "#/definitions/RoutesAndTrips"
      walkReluctance:
        type: "number"
        format: "float"
      walkSpeed:
        type: "number"
        format: "float"
      wheelchair:
        type: "boolean"
  RoutesAndTrips:
    type: "object"
    properties:
      routes:
        type: "string"
      trips:
        type: "string"
  TransportMode:
    type: "object"
    properties:
      mode:
        type: "string"
      qualifier:
        type: "string"
  MonitoredComponent:
    type: "object"
    properties:
      bugsnagProjectId:
        type: "string"
      name:
        type: "string"
  VerificationResult:
    type: "object"
    properties:
      sid:
        type: "string"
      status:
        type: "string"
      valid:
        type: "boolean"
  UserLocation:
    type: "object"
    properties:
      address:
        type: "string"
      icon:
        type: "string"
      lat:
        type: "number"
        format: "double"
      lon:
        type: "number"
        format: "double"
      name:
        type: "string"
      type:
        type: "string"
  OtpUser:
    type: "object"
    properties:
      accessibilityRoutingByDefault:
        type: "boolean"
      hasConsentedToTerms:
        type: "boolean"
      isPhoneNumberVerified:
        type: "boolean"
      mobilityProfile:
        $ref: "#/definitions/MobilityProfile"
      notificationChannel:
        type: "array"
        items:
          type: "string"
          enum:
          - "EMAIL"
          - "PUSH"
          - "SMS"
      phoneNumber:
        type: "string"
      smsConsentDate:
        type: "string"
        format: "date"
      preferredLocale:
        type: "string"
      pushDevices:
        type: "integer"
        format: "int32"
      savedLocations:
        type: "array"
        items:
          $ref: "#/definitions/UserLocation"
      storeTripHistory:
        type: "boolean"
      applicationId:
        type: "string"
      guardians:
        type: "array"
        items:
          $ref: "#/definitions/GuardianUser"
      dependents:
        type: "array"
        items:
          type: "string"
  MobilityProfile:
    type: "object"
    properties:
      isMobilityLimited:
        type: "boolean"
      mobilityDevices:
        type: "array"
        items:
          type: "string"
      mobilityMode:
        type: "string"
      visionLimitation:
        type: "string"
        enum:
        - "LEGALLY_BLIND"
        - "LOW_VISION"
        - "NONE"
  GetUsageResult:
    type: "object"
    properties:
      usagePlanId:
        type: "string"
      startDate:
        type: "string"
      endDate:
        type: "string"
      position:
        type: "string"
      items:
        $ref: "#/definitions/Map"
  ApiUsageResult:
    type: "object"
    properties:
      result:
        $ref: "#/definitions/GetUsageResult"
      apiUsers:
        $ref: "#/definitions/Map"
  App:
    type: "object"
    properties:
      releaseStage:
        type: "string"
  BugsnagEvent:
    type: "object"
    properties:
      eventDataId:
        type: "string"
      projectId:
        type: "string"
      errorId:
        type: "string"
      receivedAt:
        type: "string"
        format: "date"
      exceptions:
        type: "array"
        items:
          $ref: "#/definitions/EventException"
      severity:
        type: "string"
      context:
        type: "string"
      unhandled:
        type: "boolean"
      app:
        $ref: "#/definitions/App"
  EventException:
    type: "object"
    properties:
      errorClass:
        type: "string"
      message:
        type: "string"
  CDPFile:
    type: "object"
    properties:
      key:
        type: "string"
      name:
        type: "string"
      size:
        type: "integer"
        format: "int64"
  URL:
    type: "object"
    properties:
      protocol:
        type: "string"
      host:
        type: "string"
      port:
        type: "integer"
        format: "int32"
      file:
        type: "string"
      query:
        type: "string"
      authority:
        type: "string"
      path:
        type: "string"
      userInfo:
        type: "string"
      ref:
        type: "string"
      hostAddress:
        $ref: "#/definitions/InetAddress"
      handler:
        $ref: "#/definitions/URLStreamHandler"
      hashCode:
        type: "integer"
        format: "int32"
      tempState:
        $ref: "#/definitions/UrlDeserializedState"
externalDocs:
  description: ""
  url: ""
