package org.opentripplanner.middleware.docs;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.opentripplanner.middleware.OtpMiddlewareTest;
import org.opentripplanner.middleware.utils.YamlUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Iterator;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * Contains test to verify that the swagger docs are generated correctly.
 */
public class SwaggerTest extends OtpMiddlewareTest {
    private static final Logger LOG = LoggerFactory.getLogger(SwaggerTest.class);
    private static final HttpClient client = HttpClient.newBuilder().build();
    private static final Path versionControlledSwaggerFile = new File("src/main/resources/doc.yaml").toPath();
    private static final File apiGatewayPathTemplateFile = new File("src/main/resources/api-gateway-path-template.yaml");
    private static final File apiGatewayPathIdTemplateFile = new File("src/main/resources/api-gateway-path-id-template.yaml");
    private static final File apiGatewayPathTokenTemplateFile = new File("src/main/resources/api-gateway-path-token-template.yaml");
    private static final File apiGatewayDefinitionsFile = new File("src/main/resources/api-gateway-template.yaml");
    private static final String TAG_DESCRIPTION_TEMPLATE = "Interface for managing '{RETURN_TYPE} entities.";

    /**
     * Run this test to update the Swagger docs file located at {@link #versionControlledSwaggerFile}. This is disabled
     * because it serves as a utility for keeping the docs file up-to-date.
     */
    @Test @Disabled
    public void updateSwaggerDocs() throws IOException, InterruptedException {
        String autoGeneratedSwagger = getSwaggerDocsAsString();
        Files.writeString(versionControlledSwaggerFile, autoGeneratedSwagger);
    }

    /**
     * Rewrites child entries only if they already exist (does not insert new entries).
     */
    private void rewriteIfExists(ObjectNode parentNode, String key, JsonNode content) {
        ObjectNode nodeToModify = (ObjectNode)parentNode.get(key);
        if (nodeToModify != null) {
            // Go through the node's field names, and replace them
            // if they have an entry of the same name defined in the content to write.
            for (Iterator<String> it = nodeToModify.fieldNames(); it.hasNext(); ) {
                String fieldName = it.next();
                JsonNode newChildNode = content.get(fieldName);

                if (newChildNode != null) {
                    nodeToModify.set(fieldName, newChildNode);
                }
            }
        }
    }

    /**
     * Processes the API template macro for the specified node,
     * which is one of the entries in /tags in the base yaml file.
     */
    private void rewritePathData(JsonNode pathsNode, JsonNode tagNode, String hostName) throws IOException {
        // Description would contain text of the form API_TEMPLATE:OtpUser
        String[] descriptionParts = tagNode.get("description").asText().split(":");

        if (descriptionParts[0].equals("API_TEMPLATE")) {
            // Get the url and type parameter for the API template.
            String returnType = descriptionParts[1];
            String path = tagNode.get("name").asText();
            String slashPath = "/" + path;

            LOG.info("Rewriting API path '{}' of type '{}'.", path, returnType);

            // Rewrite, if they exist, the /path, /path/{id}, and /path/fromtoken nodes.
            ObjectNode pathsObjectNode = (ObjectNode)pathsNode;
            rewriteIfExists(pathsObjectNode, slashPath, getApiContent(apiGatewayPathTemplateFile, hostName, returnType, path));
            rewriteIfExists(pathsObjectNode, slashPath + "/{id}", getApiContent(apiGatewayPathIdTemplateFile, hostName, returnType, path));
            rewriteIfExists(pathsObjectNode, slashPath + "/fromtoken", getApiContent(apiGatewayPathTokenTemplateFile, hostName, returnType, path));

            // Rewrite the description of tagNode too.
            ((ObjectNode)tagNode).put("description", TAG_DESCRIPTION_TEMPLATE.replaceAll("\\{RETURN_TYPE}", returnType));

            LOG.info("Rewrote API path '{}' of type '{}'.", path, returnType);
        }
    }

    private JsonNode getApiContent(File templateFile, String host, String returnType, String path) throws IOException {
        // Get the YAML template for the path.
        String template = new String(Files.readAllBytes(Paths.get(templateFile.getAbsolutePath())));

        // Replace params in the template.
        String modifiedTemplate = template
            .replaceAll("\\{HOST}", host)
            .replaceAll("\\{PATH}", path)
            .replaceAll("\\{RETURN_TYPE}", returnType);

        // Import modified template and rewrite node.
        return YamlUtils.yamlMapper.readTree(modifiedTemplate);
    }

    /**
     * Generate enhanced Swagger docs for use with AWS API Gateway. This handles things like adding auth headers and key
     * parameters used with API Gateway as well as injecting info needed to make CORS work.
     */
    @Test
    public void generateApiGatewaySwagger() throws IOException, InterruptedException {
        // Start with the swagger YAML skeleton generated by spark-swagger (clone it)
        String autoGeneratedSwagger = getSwaggerDocsAsString();
        ObjectNode swaggerJson =  YamlUtils.yamlMapper.readTree(autoGeneratedSwagger).deepCopy();

        // Use definitions from a template file.
        JsonNode templateJson = YamlUtils.yamlMapper.readTree(apiGatewayDefinitionsFile);

        // Do the modifications for AWS API Gateway compatibility (extensions, CORS...).
        modifyPathEntries(swaggerJson);
        swaggerJson.set("securityDefinitions", templateJson.get("securityDefinitions"));
        insertAbstractUserRefs(swaggerJson, templateJson.get("definitions"));
        generateArrayDefinitions(swaggerJson);
        generateMissingTypes(swaggerJson);

        // Insert version (the version attribute in spark-swagger.conf is not read by spark-swagger.)
        ((ObjectNode)swaggerJson.get("info"))
            .put("version", templateJson.at("/info/version").asText());

        // Generate output file.
        Path outputPath = new File("target/doc-api-gateway.yaml").toPath();
        String yamlOutput = YamlUtils.yamlMapper.writer().writeValueAsString(swaggerJson);
        Files.writeString(outputPath, yamlOutput);
        LOG.info("Wrote API Gateway enhanced Swagger docs to: {}", outputPath);
    }

    /**
     * Each spark-swagger-generated element under the /tags
     * has a name property that is the path of an API endpoint,
     * and a description property that contains a return type.
     * Use these data to rewrite the /paths entries generated by spark-swagger
     * with our templates that include the AWS API Gateway extensions.
     */
    private void modifyPathEntries(ObjectNode autoGeneratedSwaggerJson) throws IOException {
        // The host name for AWS API Gateway mappings.
        String hostName = autoGeneratedSwaggerJson.get("host").asText();

        // Find the paths node
        JsonNode pathsNode = autoGeneratedSwaggerJson.get("paths");

        for (JsonNode tagNode : autoGeneratedSwaggerJson.get("tags")) {
            rewritePathData(pathsNode, tagNode, hostName);
        }
    }

    /**
     * Generate array type definitions for all array references that we added.
     * (spark-swagger's withResponseAsCollection method does not generate array types).
     */
    private void generateArrayDefinitions(ObjectNode autoGeneratedSwaggerJson) {
        ObjectNode definitionsNode = (ObjectNode) autoGeneratedSwaggerJson.get("definitions");
        final String ARRAY_DEF = "#/definitions/ArrayOf";

        // Find return type references from all "schema" entries.
        for (JsonNode node: autoGeneratedSwaggerJson.findValues("schema")) {
            JsonNode refNode = node.get("$ref");
            if (refNode != null && refNode.asText().startsWith(ARRAY_DEF)) {
                String baseType = refNode.asText().substring(ARRAY_DEF.length());

                JsonNode arrayDefinition = JsonNodeFactory.instance.objectNode()
                    .put("type", "array")
                    .set("items", JsonNodeFactory.instance.objectNode()
                        .put("$ref", "#/definitions/" + baseType));

                definitionsNode.set("ArrayOf" + baseType, arrayDefinition);
            }
        }
    }

    /**
     * Generate missing types not created by spark-swagger.
     */
    private void generateMissingTypes(ObjectNode autoGeneratedSwaggerJson) {
        ObjectNode definitionsNode = (ObjectNode) autoGeneratedSwaggerJson.get("definitions");
        final String DEFINITION_REF = "#/definitions/";

        // Find the types from all $ref entries.
        for (JsonNode node: autoGeneratedSwaggerJson.findValues("$ref")) {
            if (node.asText().startsWith(DEFINITION_REF)) {
                String baseType = node.asText().substring(DEFINITION_REF.length());

                // Add type if it is not defined.
                if (definitionsNode.get(baseType) == null) {
                    JsonNode typeDefinition = JsonNodeFactory.instance.objectNode()
                        .put("type", "object")
                        .put("description", "autogenerated");

                    definitionsNode.set(baseType, typeDefinition);
                }
            }
        }
    }

    /**
     * Insert {@link:AbstractUser} references.
     * (spark-swagger ignores parent classes when generating swagger.)
     * FIXME: Find a better way to include parent classes.
     */
    private void insertAbstractUserRefs(ObjectNode autoGeneratedSwaggerJson, JsonNode definitionsTemplate) {
        ObjectNode definitionsNode = (ObjectNode) autoGeneratedSwaggerJson.get("definitions");

        // Insert the AbstractUser type.
        definitionsNode.set("AbstractUser", definitionsTemplate.get("AbstractUser"));

        ObjectNode abstractUserRefNode = JsonNodeFactory.instance.objectNode();
        abstractUserRefNode.put("$ref", "#/definitions/AbstractUser");

        // On the user types, insert an "allOf" entry to include the ref to AbstractUser.
        for (String userClass : List.of("AdminUser", "ApiUser", "OtpUser")) {
            ObjectNode userNode = (ObjectNode) definitionsNode.get(userClass);
            ArrayNode allOfNode = JsonNodeFactory.instance.arrayNode()
                .add(abstractUserRefNode.deepCopy())
                .add(userNode);
            ObjectNode newUserNode = JsonNodeFactory.instance.objectNode()
                .set("allOf", allOfNode);
            definitionsNode.set(userClass, newUserNode);
        }
    }

    /**
     * Verify that version-controlled doc.yaml file is up to date with the latest changes to swagger file auto-generated
     * from the spark-swagger library (available at {@link #getSwaggerDocs()}.
     */
    @Test
    public void swaggerDocsAreUpToDate() throws IOException, InterruptedException {
        HttpResponse<String> swaggerResponse = getSwaggerDocs();
        assertEquals(swaggerResponse.statusCode(), 200);
        String autoGeneratedSwagger = swaggerResponse.body();
        JsonNode swaggerJson = YamlUtils.yamlMapper.readTree(autoGeneratedSwagger);
        String title = swaggerJson.get("info").get("title").asText();
        LOG.info("Found swagger docs title: {}", title);
        assertEquals(title, "OTP Middleware");
        String versionControlledSwagger = Files.readString(versionControlledSwaggerFile);
        assertEquals(autoGeneratedSwagger, versionControlledSwagger);
    }

    /** Convenience method to get swagger docs as string. */
    private static String getSwaggerDocsAsString() throws IOException, InterruptedException {
        return getSwaggerDocs().body();
    }

    /**
     * Get swagger docs from the endpoint provided by spark-swagger. Note: this location can be modified by updating the
     * spark-swagger.conf options.
     */
    private static HttpResponse<String> getSwaggerDocs() throws IOException, InterruptedException {
        HttpRequest get = HttpRequest.newBuilder()
            .uri(URI.create("http://localhost:4567/doc.yaml"))
            .GET()
            .build();
        return client.send(get, HttpResponse.BodyHandlers.ofString());
    }
}
