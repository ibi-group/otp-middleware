package org.opentripplanner.middleware.docs;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.opentripplanner.middleware.OtpMiddlewareTest;
import org.opentripplanner.middleware.utils.YamlUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * Contains test to verify that the swagger docs are generated correctly.
 */
public class SwaggerTest extends OtpMiddlewareTest {
    private static final Logger LOG = LoggerFactory.getLogger(SwaggerTest.class);
    private static final HttpClient client = HttpClient.newBuilder().build();
    private static final Path versionControlledSwaggerFile = new File("src/main/resources/doc.yaml").toPath();
    private static final File apiGatewayPathTemplateFile = new File("src/main/resources/api-gateway-path-template.yaml");
    private static final File apiGatewayPathIdTemplateFile = new File("src/main/resources/api-gateway-path-id-template.yaml");
    private static final File apiGatewayPathTokenTemplateFile = new File("src/main/resources/api-gateway-path-token-template.yaml");
    private static final File apiGatewayDefinitionsFile = new File("src/main/resources/api-gateway-template.yaml");
    private static final String TAG_DESCRIPTION_TEMPLATE = "Interface for managing '{RETURN_TYPE} entities.";

    /**
     * Run this test to update the Swagger docs file located at {@link #versionControlledSwaggerFile}. This is disabled
     * because it serves as a utility for keeping the docs file up-to-date.
     */
    @Test @Disabled
    public void updateSwaggerDocs() throws IOException, InterruptedException {
        String autoGeneratedSwagger = getSwaggerDocsAsString();
        Files.writeString(versionControlledSwaggerFile, autoGeneratedSwagger);
    }

    private void putIfExists(ObjectNode parentNode, String key, JsonNode content) {
        JsonNode replacedNode = parentNode.get(key);
        if (replacedNode != null) {
            parentNode.set(key, content);
        }
    }

    /**
     * Processes the API template macro for the specified node,
     * which is one of the entries in /tags in the base yaml file.
     */
    private void rewritePathData(JsonNode pathsNode, JsonNode tagNode, String hostName) throws IOException {
        // Description would contain text of the form API_TEMPLATE:OtpUser
        String[] descriptionParts = tagNode.get("description").asText().split(":");

        if (descriptionParts[0].equals("API_TEMPLATE")) {
            // Get the url and type parameter for the API template.
            String returnType = descriptionParts[1];
            String path = tagNode.get("name").asText();
            String slashPath = "/" + path;

            LOG.info("Rewriting API path '{}' of type '{}'.", path, returnType);

            // Rewrite, if they exist, the /path, /path/{id}, and /path/fromtoken nodes.
            ObjectNode pathsObjectNode = (ObjectNode)pathsNode;
            putIfExists(pathsObjectNode, slashPath, getApiContent(apiGatewayPathTemplateFile, hostName, returnType, path));
            putIfExists(pathsObjectNode, slashPath + "/{id}", getApiContent(apiGatewayPathIdTemplateFile, hostName, returnType, path));
            putIfExists(pathsObjectNode, slashPath + "/fromtoken", getApiContent(apiGatewayPathTokenTemplateFile, hostName, returnType, path));

            // Rewrite the description of tagNode too.
            ((ObjectNode)tagNode).put("description", TAG_DESCRIPTION_TEMPLATE.replaceAll("\\{RETURN_TYPE\\}", returnType));

            LOG.info("Rewrote API path '{}' of type '{}'.", path, returnType);
        }
    }

    private JsonNode getApiContent(File templateFile, String host, String returnType, String path) throws IOException {
        // Get the YAML template for the path.
        String template = new String(Files.readAllBytes(Paths.get(templateFile.getAbsolutePath())));

        // Replace params in the template.
        String modifiedTemplate = template
            .replaceAll("\\{HOST\\}", host)
            .replaceAll("\\{PATH\\}", path)
            .replaceAll("\\{RETURN_TYPE\\}", returnType);

        // Import modified template and rewrite node.
        return YamlUtils.yamlMapper.readTree(modifiedTemplate);
    }

    /**
     * Generate enhanced Swagger docs for use with AWS API Gateway. This handles things like adding auth headers and key
     * parameters used with API Gateway as well as injecting info needed to make CORS work.
     */
    @Test
    public void generateApiGatewaySwagger() throws IOException, InterruptedException {
        String autoGeneratedSwagger = getSwaggerDocsAsString();

        // TODO Remove
        Files.writeString(Paths.get("doc.yaml"), autoGeneratedSwagger);

        // Modify YAML to contain swagger info that is necessary for providing the API via AWS API Gateway.
        ObjectNode autoGeneratedSwaggerJson =  YamlUtils.yamlMapper.readTree(autoGeneratedSwagger).deepCopy();

        // TODO: add more swagger processing logic here.

        // The host name for AWS API Gateway mappings.
        String hostName = autoGeneratedSwaggerJson.get("host").asText();

        // Find the paths node
        JsonNode pathsNode = autoGeneratedSwaggerJson.get("paths");

        // Each spark-swagger-generated element under the /tags
        // has a name property that is the path of an API endpoint,
        // and a description property that contains a return type.
        // Use these informations to rewrite the /paths entries generated by spark-swagger
        // with our templates that include the AWS API Gateway extensions.
        for (JsonNode tagNode : autoGeneratedSwaggerJson.get("tags")) {
            rewritePathData(pathsNode, tagNode, hostName);
        }

        // Insert type definitions from a preset definitions file.
        JsonNode apiGatewayTemplateJson = YamlUtils.yamlMapper.readTree(apiGatewayDefinitionsFile);
        autoGeneratedSwaggerJson.set("definitions", apiGatewayTemplateJson.get("definitions"));
        autoGeneratedSwaggerJson.set("securityDefinitions", apiGatewayTemplateJson.get("securityDefinitions"));

        // Insert version (the version attribute in spark-swagger.conf is not read.)
        ((ObjectNode)autoGeneratedSwaggerJson.get("info"))
            .put("version", apiGatewayTemplateJson.at("/info/version").asText());

        // Generate output file.
        Path outputPath = new File("target/doc-api-gateway.yaml").toPath();
        String yamlOutput = YamlUtils.yamlMapper.writer().writeValueAsString(autoGeneratedSwaggerJson);
        Files.writeString(outputPath, yamlOutput);
        LOG.info("Wrote API Gateway enhanced Swagger docs to: {}", outputPath);
    }

    /**
     * Verify that version-controlled doc.yaml file is up to date with the latest changes to swagger file auto-generated
     * from the spark-swagger library (available at {@link #getSwaggerDocs()}.
     */
    @Test
    public void swaggerDocsAreUpToDate() throws IOException, InterruptedException {
        HttpResponse<String> swaggerResponse = getSwaggerDocs();
        assertEquals(swaggerResponse.statusCode(), 200);
        String autoGeneratedSwagger = swaggerResponse.body();
        JsonNode swaggerJson = YamlUtils.yamlMapper.readTree(autoGeneratedSwagger);
        String title = swaggerJson.get("info").get("title").asText();
        LOG.info("Found swagger docs title: {}", title);
        assertEquals(title, "OTP Middleware");
        String versionControlledSwagger = Files.readString(versionControlledSwaggerFile);
        assertEquals(autoGeneratedSwagger, versionControlledSwagger);
    }

    /** Convenience method to get swagger docs as string. */
    private static String getSwaggerDocsAsString() throws IOException, InterruptedException {
        return getSwaggerDocs().body();
    }

    /**
     * Get swagger docs from the endpoint provided by spark-swagger. Note: this location can be modified by updating the
     * spark-swagger.conf options.
     */
    private static HttpResponse<String> getSwaggerDocs() throws IOException, InterruptedException {
        HttpRequest get = HttpRequest.newBuilder()
            .uri(URI.create("http://localhost:4567/doc.yaml"))
            .GET()
            .build();
        return client.send(get, HttpResponse.BodyHandlers.ofString());
    }
}
