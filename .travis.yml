os: linux
dist: xenial
language: java
jdk:
- openjdk11
# Install mongoDB to perform persistence tests.
services:
  - mongodb
cache:
  directories:
  - "$HOME/.m2"
  - "$HOME/.cache/yarn"
before_install:
- nvm install '12'
install: true
before_script:
- yarn global add @conveyal/maven-semantic-release semantic-release@15
# Create AWS credentials file (required for E2E tests).
- |
  mkdir -p ~/.aws
  cat > ~/.aws/credentials << EOL
  [default]
  aws_access_key_id = ${AWS_ACCESS_KEY_ID}
  aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}
  EOL
script:
# Package app and run unit tests.
- mvn package
# Run E2E tests (skip packaging).
# TODO: Should this only run on certain builds (e.g., PRs to master)? Perhaps not,
#       unless it begins to take a very long time.
- RUN_E2E=true mvn test
after_success:
# this first codecov run will upload a report associated with the commit set through Travis CI environment variables
- bash <(curl -s https://codecov.io/bash)
  # run maven-semantic-release to potentially create a new release of gtfs-lib.
  #
  # If maven-semantic-release finishes successfully and the current branch is master, upload coverage reports for the
  # commits that maven-semantic-release generated. Since the above codecov run is associated with the commit that
  # initiated the Travis build, the report will not be associated with the commits that maven-semantic-release performed
  # (if it ended up creating a release and the two commits that were a part of that workflow). Therefore, if on master
  # codecov needs to be ran two more times to create codecov reports for the commits made by maven-semantic-release.
  # See https://github.com/conveyal/gtfs-lib/issues/193.
  #
  # The git commands get the commit hash of the HEAD commit and the commit just before HEAD.
- |
  semantic-release --prepare @conveyal/maven-semantic-release --publish @semantic-release/github,@conveyal/maven-semantic-release --verify-conditions @semantic-release/github,@conveyal/maven-semantic-release --verify-release @conveyal/maven-semantic-release --use-conveyal-workflow --dev-branch=dev
  if [[ "$TRAVIS_BRANCH" = "master" ]]; then
    bash <(curl -s https://codecov.io/bash) -C "$(git rev-parse HEAD)"
    bash <(curl -s https://codecov.io/bash) -C "$(git rev-parse HEAD^)"
  fi
before_deploy:
# Obtain the branch name.
- export BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH;
  else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)
- export BRANCH_CLEAN=${BRANCH//\//_}
# `git describe --tags --always HEAD` returns a string of the form v0.0.0-52-ge10d02d.
# It assumes you have pushed a tag on a commit on github (e.g. a commit on the dev branch).
# If for some reason git can't find a tag, fallback with --always to a commit sha.
- export JAR_VERSION=$(git describe --tags --always HEAD)
- echo $JAR_VERSION
# Create a deployment folder, and a folder for the branch.
- mkdir deploy
- mkdir deploy/$BRANCH_CLEAN
# Add a file with latest build info (that continuous deployment scripts can probe).
- echo otp-middleware-$JAR_VERSION.jar > deploy/$BRANCH_CLEAN/latest.txt
# Add the JAR file.
- cp target/otp-middleware.jar "deploy/$BRANCH_CLEAN/otp-middleware-$JAR_VERSION.jar"
# Deploy to S3.
deploy:
  provider: s3
  skip_cleanup: true
  access_key_id: AKIA2YG5XQ2YJDTPRQ7Z
  secret_access_key:
    secure: LCD8DBvwPCkKXH+YWk0oZaQLvGSXbHb2/QcvEGnb4q6eaNASuesCWVc5t/KwzdA1SLcM4RNs3xH3o4oo3AYy/ARX+Ouf0yHal6p7WDXYceuo/yrsxt1NxrVDDRxgRCCmkVp8TpKV3tTH7lFAGipFT1XT+a1GkLfgji2OnJYsgercSS7WJHg7nU3c4PSNSXWbh3cp78qWcmKmSNN+D5JqZfNOM2hgldibcr+wspNk4eirgxvZpgcUfNbit/Si+Lz74lMLla75AFXs5HoD/kObrNgaycIFcUpO0+SWJ1loDW5T2KWZAAbbKl7OTh6npX93Gz82naDNH0g3vHqtPwlQa/j4lNpBlo/ArmfMSbpmc15BnEKdt+w1BOLZnZmJPRJhRW5qGmQDStRR6axJiBmYuIqj1lan5L38fG5XM/M4sAKJo9rs2uAm578NS4e6rT8zrY1bYQw9+0P+5CP70VgACZg+ibMjW2f6jNCp9Dg4G4W38+n0wwwbIJzYPieap2sAgqRLNHWod8WMXFUNEOJyNRE2kXc8ZOq7JnhOkBdGgz4JgPGz6xV55HwXjOso13V1q4us85YIZA+AG1CI6JGjoNm3zQNnlzETztd7589y8N6IFQ22U+XkFLEQZuZTo43+UTgAUFf9bKoYWAMwwvGquCeS/2xurXLyKhteGH6aEBw=
  bucket: otp-middleware-builds
  local_dir: deploy
  acl: public_read
  on:
    repo: ibi-group/otp-middleware
    all_branches: true
